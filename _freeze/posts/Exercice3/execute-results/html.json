{
  "hash": "7c32d80212cfd74cf73f82e60e3b75fc",
  "result": {
    "markdown": "---\ntitle: \"Exercice3\"\nauthor: \"ONNO Lilou\"\ndate: \"2024-03-06\"\noutput: html_document\n---\n\n# Exercice 3\n\n**Library**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'stringr' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(arrow)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'arrow'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:lubridate':\n\n    duration\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:utils':\n\n    timestamp\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(jsonlite)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'jsonlite' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(RSQLite)\n```\n:::\n\n\nÀ la racine du projet, créez un dossier data. Téléchargez les données associées au TP3 et décompressez les dans le dossier data. Supprimez le fichier .zip.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchemin_zip <- \"C:/Users/lilou/Desktop/M1 Econométrie - Statistique/S2/R avancé/tp3 (3).zip\"\n\ndir.create(\"data\", showWarnings = FALSE)\n\nunzip(chemin_zip, exdir = \"data\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in unzip(chemin_zip, exdir = \"data\"): erreur 1 lors de l'extraction\nd'un fichier zip\n```\n:::\n\n```{.r .cell-code}\nfile.remove(chemin_zip)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in file.remove(chemin_zip): impossible d'effacer le fichier\n'C:/Users/lilou/Desktop/M1 Econométrie - Statistique/S2/R avancé/tp3 (3).zip',\nà cause de 'No such file or directory'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n**Question 1.** Listez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- list.files(\"data\")\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncharacter(0)\n```\n:::\n:::\n\n\n*Nous avons 4 fichiers présents dans le dossier data : MACOSX, data.sqlite, olympics_athletes.json, tokyo_athletes.parquet*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextensions <- tools::file_ext(data)\nprint(extensions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlogical(0)\n```\n:::\n:::\n\n\n*Les extensions sont sqlite, json, parquet*\n\n**Question 2.** Lisez le fichier .parquet en utilisant la librairie arrow. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchemin_parquet <- \"C:/Users/lilou/Desktop/M1 Econométrie - Statistique/S2/R avancé/data/tokyo_athletes.parquet\"\n\nbdd_parquet <- arrow::read_parquet(chemin_parquet)\n\ndim(bdd_parquet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11085     3\n```\n:::\n\n```{.r .cell-code}\ncolnames(bdd_parquet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n```\n:::\n:::\n\n\n*Nous avons 3 colonnes Names, NOC et Discipline pour 11 085 observations*\n\n**Question 3 :** Lisez le fichier .json en utilisant la librairie jsonlite. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(jsonlite)\nchemin_json <- \"C:/Users/lilou/Desktop/M1 Econométrie - Statistique/S2/R avancé/data/olympics_athletes.json\"\n\nbdd_json <- fromJSON(txt = readLines(chemin_json, warn = FALSE))\n\ndim(bdd_json)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 269731     13\n```\n:::\n\n```{.r .cell-code}\ncolnames(bdd_json)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\n*Nous avons 13 colonnes et 269 731 observations*\n\n**Question 4 :** Importez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Le driver à utiliser sera SQLite(). Quelles sont les tables présentes dans la table ? Vous pourrez utiliser la fonction dbListTables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RSQLite)\n\nchemin_sqlite <- \"C:/Users/lilou/Desktop/M1 Econométrie - Statistique/S2/R avancé/data/data.sqlite\"\n\nconnexion <- dbConnect(SQLite(), dbname = chemin_sqlite)\n```\n:::\n\n\n**Question 5 :** Créez deux nouvelles tables dans la base de données à l'aide de la fonction dbWriteTable. Les tables s'appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- fromJSON(txt = \n                                readLines(chemin_json, warn = FALSE))\n\ntokyo_athletes <- arrow::read_parquet(chemin_parquet)\n\ndbWriteTable(connexion, \"olympics_athletes\", olympics_athletes,\n             overwrite = TRUE)\n\ndbWriteTable(connexion, \"tokyo_athletes\", tokyo_athletes, \n             overwrite = TRUE)\n```\n:::\n\n\n**Qestion 6 :** Inspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListFields(connexion, \"olympics_athletes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\n**Question 7 :** Importez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_olympics_athletes <- \n  dbReadTable(connexion, \"olympics_athletes\")\n\ntibble_olympics_athletes <- \n  as_tibble(table_olympics_athletes)\n\nhead(tibble_olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 13\n     ID Name       Sex     Age Height Weight Team  NOC   Games City  Sport Event\n  <int> <chr>      <chr> <int>  <int>  <dbl> <chr> <chr> <chr> <chr> <chr> <chr>\n1     1 A Dijiang  M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n2     2 A Lamusi   M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n3     3 Gunnar Ni… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n4     4 Edgar Lin… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n5     5 Christine… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n6     5 Christine… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n# ℹ 1 more variable: Medal <chr>\n```\n:::\n:::\n\n\n**Question 8 :** Convertissez la colonne Sex en variable catégorielle avec la fonction mutate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_olympics_athletes <- tibble_olympics_athletes %>%\n  mutate(Sex = as.factor(Sex))\n\nstr(tibble_olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [269,731 × 13] (S3: tbl_df/tbl/data.frame)\n $ ID    : int [1:269731] 1 2 3 4 5 5 5 5 5 5 ...\n $ Name  : chr [1:269731] \"A Dijiang\" \"A Lamusi\" \"Gunnar Nielsen Aaby\" \"Edgar Lindenau Aabye\" ...\n $ Sex   : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 1 1 1 1 1 1 ...\n $ Age   : int [1:269731] 24 23 24 34 21 21 25 25 27 27 ...\n $ Height: int [1:269731] 180 170 NA NA 185 185 185 185 185 185 ...\n $ Weight: num [1:269731] 80 60 NA NA 82 82 82 82 82 82 ...\n $ Team  : chr [1:269731] \"China\" \"China\" \"Denmark\" \"Denmark/Sweden\" ...\n $ NOC   : chr [1:269731] \"CHN\" \"CHN\" \"DEN\" \"DEN\" ...\n $ Games : chr [1:269731] \"1992 Summer\" \"2012 Summer\" \"1920 Summer\" \"1900 Summer\" ...\n $ City  : chr [1:269731] \"Barcelona\" \"London\" \"Antwerpen\" \"Paris\" ...\n $ Sport : chr [1:269731] \"Basketball\" \"Judo\" \"Football\" \"Tug-Of-War\" ...\n $ Event : chr [1:269731] \"Basketball Men's Basketball\" \"Judo Men's Extra-Lightweight\" \"Football Men's Football\" \"Tug-Of-War Men's Tug-Of-War\" ...\n $ Medal : chr [1:269731] NA NA NA \"Gold\" ...\n```\n:::\n:::\n\n\n**Question 9 :** Créez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l'année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d'été ou d'hiver. Vous pourrez utiliser la fonction separate_wider_delim de tidyr notamment. Les questions suivantes nécessitent l'application de plusieurs instructions en séquence. Essayez tant que possible de chaîner les instructions avec des pipes (%\\>% ou \\|\\>).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_olympics_athletes <- tibble_olympics_athletes |> \n  separate(Games, into = c(\"Year\", \"isSummer\"), \n           sep = \" \", convert = TRUE)\n\nprint(tibble_olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 269,731 × 14\n      ID Name   Sex     Age Height Weight Team  NOC    Year isSummer City  Sport\n   <int> <chr>  <fct> <int>  <int>  <dbl> <chr> <chr> <int> <chr>    <chr> <chr>\n 1     1 A Dij… M        24    180     80 China CHN    1992 Summer   Barc… Bask…\n 2     2 A Lam… M        23    170     60 China CHN    2012 Summer   Lond… Judo \n 3     3 Gunna… M        24     NA     NA Denm… DEN    1920 Summer   Antw… Foot…\n 4     4 Edgar… M        34     NA     NA Denm… DEN    1900 Summer   Paris Tug-…\n 5     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 6     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 7     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 8     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 9     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n10     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n# ℹ 269,721 more rows\n# ℹ 2 more variables: Event <chr>, Medal <chr>\n```\n:::\n:::\n\n\n**Question 10 :** Calculez la moyenne d'age des athletes pour chacune des éditions des JO d'été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_Ol_moyenne_age <- tibble_olympics_athletes |> \n  group_by(Year) |> \n  summarise(moyenne_age = mean(Age, na.rm = TRUE))\n\ntibble_Ol_moyenne_age\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 35 × 2\n    Year moyenne_age\n   <int>       <dbl>\n 1  1896        23.6\n 2  1900        28.9\n 3  1904        26.7\n 4  1906        27.1\n 5  1908        27.0\n 6  1912        27.5\n 7  1920        29.3\n 8  1924        28.0\n 9  1928        27.9\n10  1932        29.6\n# ℹ 25 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Edition qui compte les athlètes les plus jeune  \ntibble_Ol_athlete_jeune <- tibble_Ol_moyenne_age |> \n  filter(moyenne_age == min(moyenne_age, na.rm = TRUE))\n\ntibble_Ol_athlete_jeune\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year moyenne_age\n  <int>       <dbl>\n1  1896        23.6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Edition qui compte les athlètes les plus vieux  \ntibble_Ol_athlete_vieux <- tibble_Ol_moyenne_age |>  \n  filter(moyenne_age == max(moyenne_age, na.rm = TRUE))\n\ntibble_Ol_athlete_vieux\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year moyenne_age\n  <int>       <dbl>\n1  1932        29.6\n```\n:::\n:::\n\n\n**Question 11 :** Quelle est la discipline des JO d'été dont la taille des athlètes féminines est la plus grande ?\n\nQuelle a été cette discipline au cours de chacune des éditions ?\n\nCalculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes_femmes <- tibble_olympics_athletes %>%\n  filter(Sex == \"F\") %>%\n  filter(isSummer == \"Summer\") %>%\n  arrange(desc(Height))\n\nhead(athletes_femmes$Sport, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Basketball\"\n```\n:::\n:::\n\n\n*la discipline des JO d'été dont la taille des athlètes féminies est la plus grande est Basketball*\n\n**Question 12 :** En utilisant les fonctions du packages stringr, extrayez les dates des différentes éditions des JO. Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que \"26 Juillet 2024\". Vous pourrez utiliser cette regex avec la fonction str_extract_all par exemple.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte <- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\"\n\nregex_date <- \"\\\\b\\\\d{1,2} (Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre) \\\\d{4}\\\\b\"\n\ndate <- str_extract_all(texte, regex_date)[[1]]\nprint(date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n```\n:::\n:::\n\n\n**Question 13 :** Remplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmois_en_numero <- function(mois) {\n  mois <- tolower(mois)\n  mois_numeros <- \n    c(\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\")\n  \n  return(match(mois, mois_numeros))\n}\n#Remplaceons les noms des mois par leur numéro\ndates_numero <- str_replace_all(date, regex_date, function(match) {\n  \n  elements <- str_split(match, \" \")[[1]]\n \n  elements[2] <- mois_en_numero(elements[2])\n  \n  return(paste(elements, collapse = \" \"))\n})\n\nprint(dates_numero)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 8 2016\"  \"20 8 2016\" \"23 7 2021\" \"8 8 2021\"  \"26 7 2024\" \"11 8 2024\"\n```\n:::\n:::\n\n\n**Question 14 :** Convertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconvertir_date <- function(date_texte) {\n  elements <- str_split(date_texte, \" \")[[1]]\n  jour <- as.integer(elements[1])\n  mois <- as.integer(elements[2])\n  annee <- as.integer(elements[3])\n  return(dmy(paste(jour, mois, annee, sep = \"-\")))\n}\n\n\nconvertir_date1 <- sapply(dates_numero, convertir_date)\n\nprint(convertir_date1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 5 8 2016 20 8 2016 23 7 2021  8 8 2021 26 7 2024 11 8 2024 \n    17018     17033     18831     18847     19930     19946 \n```\n:::\n:::\n\n\n**Question 15 :** Combien de jours ont séparés les éditions de Rio et Tokyo ? Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrio_date <- dmy(\"5 Août 2016\")\ntokyo_date <- dmy(\"23 Juillet 2021\")\nparis_date <- dmy(\"26 Juillet 2024\")\n\nrio_et_tokyo <- \n  as.numeric(difftime(tokyo_date, \n                      rio_date, \n                      units = \"days\"))\n\nrio_et_tokyo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1813\n```\n:::\n:::\n\n\n*Il y a 1 813 jours entre les éditions de Rio en 2016 et de Tokyo en 2021*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntokyo_et_paris <- \n  as.numeric(difftime(paris_date, \n                      tokyo_date, \n                      units = \"days\"))\n\ntokyo_et_paris\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1099\n```\n:::\n:::\n\n\n*Il y a 1 099 jours entre les éditions de Tokyo en 2021 et de Paris en 2024*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrio_et_tokyo_sem <- \n  as.numeric(difftime(tokyo_date,\n                      rio_date,\n                      units = \"weeks\"))\nrio_et_tokyo_sem\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 259\n```\n:::\n:::\n\n\n*Il y a 259 semaines entre les éditions de Rio en 2016 et de Tokyo en 2021*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntokyo_et_paris_sem <- \n  as.numeric(difftime(paris_date,\n                      tokyo_date,\n                      units = \"weeks\"))\n\ntokyo_et_paris_sem\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 157\n```\n:::\n:::\n\n\n*Il y a 157 semaines entre les éditions de Tokyo en 2021 et de Paris en 2024*\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}