{
  "hash": "636b9af449419225b3b56985439ba718",
  "result": {
    "markdown": "---\ntitle: \"Exercice2\"\nauthor: \"ONNO Lilou\"\ndate: \"2024-03-06\"\noutput: html_document\n---\n\n# Exercice 2\n\n**Library**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'stringr' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n:::\n\n\n**Question 1 :** Lancez la commande suivante :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_tables <-\nsession(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |>\nhtml_elements(\".wikitable\") |>\nhtml_table()\n```\n:::\n\n\n**Question 2 :** Nous allons tout d'abord nous intéresser à la première table. Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. La table n'est pas bien formattée. Supprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\",\"Athletes_medailles\", \"Athletes_or\"). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d'entiers\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete <- list_tables[[1]]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete <- data_medailles_sport_ete[, -1]\n\ndata_medailles_sport_ete <- data_medailles_sport_ete[-1, ]\n\ncolnames(data_medailles_sport_ete) <- NULL\n\ncolnames(data_medailles_sport_ete) <- c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete$Editions = as.integer(data_medailles_sport_ete$Editions)\n\ndata_medailles_sport_ete$Epreuves_2020 = as.integer(data_medailles_sport_ete$Epreuves_2020)\n\ndata_medailles_sport_ete$Or = as.integer(data_medailles_sport_ete$Or)\n\ndata_medailles_sport_ete$Argent = as.integer(data_medailles_sport_ete$Argent)\n\ndata_medailles_sport_ete$Bronze = as.integer(data_medailles_sport_ete$Bronze)\n\ndata_medailles_sport_ete$Total = as.integer(data_medailles_sport_ete$Total)\n```\n:::\n\n\n**Question 3 :** Quelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l'histoire des jeux olympiques ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDiscipline_top3 <- data_medailles_sport_ete %>%\n  arrange(desc(Total)) %>%\n  head(3) %>%\n  select(Discipline, Total)\n\nprint(Discipline_top3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  Discipline               Total\n  <chr>                    <int>\n1 Athlétisme                3085\n2 Natation(hommes, femmes)  1814\n3 Lutte                     1358\n```\n:::\n:::\n\n\n*Les trois disciplines avec le plus de médailles est l'Athlétisme, la Natation, et la Lutte*\n\n**Question 4 :** Quelles sont les 6 disciplines avec le moins d'épreuves en 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDiscipline_moins_epreuve<-data_medailles_sport_ete %>%\n  arrange(Epreuves_2020)\n\nDiscipline_moins_epr <- head(Discipline_moins_epreuve, 6)\n\nprint(Discipline_moins_epr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 10\n  Discipline            Annees  Editions Epreuves_2020    Or Argent Bronze Total\n  <chr>                 <chr>      <int>         <int> <int>  <int>  <int> <int>\n1 Football              1900–1…       27             2    34     34     35   103\n2 Golf                  1900–1…        4             2     8      8      9    19\n3 Handball              1936,d…       14             2    26     26     26    78\n4 Hockey sur gazon      1908, …       24             2    35     35     36   106\n5 Natation synchronisée Depuis…       10             2    20     18     19    57\n6 Pentathlon moderne    Depuis…       25             2    42     42     42   126\n# ℹ 2 more variables: Athletes_medailles <chr>, Athletes_or <chr>\n```\n:::\n:::\n\n\n*Les 6 disciplines avec le moins d'épreuves en 2020 est le football, le golf, le handball, le hockey sur gazon, la natation synchronisé et le pentathlon*\n\n**Question 5 :** La colonne Editions nous renseigne sur le nombre total d'apparence des disciplines aux JO d'été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_int <- function(depuis, data_medailles_sport_ete) {\n \n   #on va extraire les années de la colonne Années\n  data_medailles_sport_ete$Annees <- as.character(data_medailles_sport_ete$Annees)\n  \n  #on va utiliser une expression reg pour extraire les années\n  data_medailles_sport_ete$Annees <- gsub(\".*(\\\\d{4}).*\", \"\\\\1\", data_medailles_sport_ete$Annees)\n  \n  #on convertie la colonne Années en numérique\n  data_medailles_sport_ete$Annees <- as.numeric(data_medailles_sport_ete$Annees)\n  \n  #on va garedr les disciplines qui commence par depuis\n  disciplines_filtrees <- subset(data_medailles_sport_ete, Annees >= depuis)\n  \n  #on va calculer le nombre total d'éditions pour chaque discipline\n  resultat <- aggregate(Editions ~ Discipline, disciplines_filtrees, sum)\n  \n  #retourner le résultat final\n  return(resultat)\n}\n\ncalcul_nb_editions_int(1800, data_medailles_sport_ete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    Discipline Editions\n1                   Athlétisme       29\n2                       Aviron       28\n3                    Badminton        8\n4                  Basket-ball       20\n5                         Boxe       26\n6                  Canoë-kayak       20\n7     Cyclisme(hommes, femmes)       29\n8                   Équitation       26\n9                      Escrime       29\n10                    Football       27\n11                        Golf        4\n12 Gymnastique(hommes, femmes)       29\n13               Haltérophilie       26\n14                    Handball       14\n15            Hockey sur gazon       24\n16                        Judo       14\n17                       Lutte       28\n18       Natation synchronisée       10\n19    Natation(hommes, femmes)       29\n20          Pentathlon moderne       25\n21                    Plongeon       27\n22                   Taekwondo        6\n23                      Tennis       16\n24             Tennis de table        9\n25                         Tir       27\n26                 Tir à l'arc       17\n27                   Triathlon        6\n28                       Voile       27\n29                 Volley-ball       15\n30                  Water polo       26\n```\n:::\n:::\n\n\n**Question 6 :** Dans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères. calcul_nb_editions_str(\"1896, 1904, depuis 1920\") qui retournera la valeur 26.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fonction pour calculer la partie0 - str\ncalcul_nb_editions_str <- function(x) {\n  p <- str_split(x, \",\", simplify = TRUE)\n  partie0 <- ifelse(!grepl(\"(?i)depuis|[-—–—]\", p), \"1\", p)\n  return(partie0)\n}\n\n# Fonction pour calculer la partie1 -integer\ncalcul_nb_editions_integer <- function(partie0) {\n  depuis_annees <- \n    str_extract_all(partie0, \"(?i)depuis\\\\s+(\\\\d{4})\") %>%\n    unlist() %>%\n    str_extract(\"\\\\d+\")\n  \n  calcul_edition_t <- \n    as.integer(depuis_annees)\n  \n  resultat <- \n    (2024 - calcul_edition_t) / 4 - ifelse(calcul_edition_t < 1916, 3, \n    ifelse(calcul_edition_t < 1944, 2, 0))\n  \n  partie1 <- \n    ifelse(grepl(\"(?i)depuis\\\\s+\\\\d{4}\", partie0), \n           as.character(resultat), partie0)\n  \n  return(partie1)\n}\n\n# Fonction pour calculer le résultat final\ncalcul_final <- function(partie1) {\n \n   partie1_numerique <- \n     as.numeric(partie1)\n  \n   resultat_final <- \n     sum(partie1_numerique, na.rm = TRUE)  \n\n  return(resultat_final)\n}\n\n# Fonction principale\ncalcul_nb_editions <- function(x) {\n  \n  partie0 <- calcul_nb_editions_str(x)\n  \n  partie1 <- calcul_nb_editions_integer(partie0)\n  \n  resultat_final <- calcul_final(partie1)\n  \n  return(resultat_final)\n}\n\n# application de la fonction\nresultat2 <- calcul_nb_editions(\"1896, 1904, depuis 1920\")\nprint(resultat2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26\n```\n:::\n:::\n\n\n*Nous avons bien 26*\n\n**Question 7 :** Définissez une fonction générique calcul_nb_editions et deux implémentations calcul_nb_editions.integer et 'calcul_nb_editions.character.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#fonction générique calcul_nb_editions\ncalcul_nb_editions <- function(x) {\n  r <- str_split(x, \",\", simplify = TRUE)\n  partie0 <- ifelse(!grepl(\"(?i)depuis|[-—–—]\", r[,]), \"1\", r[,])\n  return(partie0)\n}\n#premiere implantations : avec integer\ncalcul_nb_editions_integer <- \n  function(partie0) {\n  \n  depuis_annees <- \n    str_extract_all(partie0, \"(?i)depuis\\\\s+(\\\\d{4})\") |>\n    unlist() |> \n    str_extract(\"\\\\d+\")\n \n  calcul_edition_t <- \n    as.integer(depuis_annees)\n  \n  resultat <- \n    (2024 - calcul_edition_t) / 4 - \n    ifelse(calcul_edition_t < 1916, 3, \n           ifelse(calcul_edition_t < 1944, 2, 0))\n \n  partie1 <- \n    ifelse(grepl(\"(?i)depuis\\\\s+\\\\d{4}\", partie0),\n           as.character(resultat), partie0)\n \n  return(partie1)\n}\n\n#deuxième implantations : avec character\ncalcul_nb_editions.character <- \n  function(partie1) {\n  dates <- str_match(part2, \"([file://\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4}]\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4})\")\n  \n  a <- as.integer(dates[1, 2])\n  \n  b <- as.integer(dates[1, 3])\n \n  x <- ifelse(a < 1915 & b > 1917, 1,\n              ifelse(a < 1915 & b > 1945, 3,\n                     ifelse(1917 < a & a < 1939 & b > 1945, 2, 0)))\n \n  c_value <- (b - a) / 4 + 1 - x\n \n   partie2 <- \n     ifelse(grepl(\"(\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4})\", partie1),\n            as.character(c_value), partie1)\n  \n   return(partie2)\n}\n\n\ncalcul_final2 <- \n  function(partie2) {\n    partie2_numerique <- \n      as.numeric(partie2[grepl(\"^\\\\d+$\", partie2)])\n  \n    resultat_final <- \n      sum(partie2_numerique)\n  \n    return(resultat_final)\n}\n\n#fonciton final qui regroupe les différente partie de notre fonction à savoir integer et character\ncalcul_nb_editions2 <- function(x) {\n  partie0 <- calcul_nb_editions(x)\n  partie1 <- calcul_nb_editions_integer(partie0)\n  partie2 <- calcul_nb_editions.character(partie1)\n  resultat_final <- calcul_final2(partie2)\n \n  return(resultat_final)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions(2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"\n```\n:::\n\n```{.r .cell-code}\ncalcul_nb_editions(\"1904–1924, depuis 1948\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1904–1924\"    \" depuis 1948\"\n```\n:::\n:::\n\n\n**Question 8 :** En Athlétisme, le Finlandais Paavo Nurmi détient le record de médailles avec 12 médailles obtenues lors des JO d'hiver.\n\nImplémentez une fonction calcul_medailles_individuelles qui détermine le nombre de médaille maximal a été obtenu par un athlète lors d'olympiades. Note : s'il y a plusieurs athlètes à égalité, alors la cellule comporte plusieurs éléments, et une manipulation de la chaîne de caractères est nécessaire.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#implantation de la fonction calcul_medailles_individuelles \ncalcul_medailles_individuelles <- \n  function(data_medailles_sport_ete) {\n  \n    total_medailles <- \n      rowSums(data_medailles_sport_ete[, c(\"Or\", \"Argent\",\"Bronze\")])\n \n    max_medailles <- \n      max(total_medailles)\n  \n   athletes_avec_max_medailles <-\n     data_medailles_sport_ete$Athletes_medailles[total_medailles == max_medailles]\n  \n   return(athletes_avec_max_medailles)\n}\n\ncalcul_medailles_individuelles(data_medailles_sport_ete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Paavo Nurmi (FIN) (9-3-0)\"\n```\n:::\n:::\n\n\n*C'est Paavo Nurmi qui a le plus de médaille*\n\n**Question 9 :** Quel est le top 3 des athlètes ? Vous utiliserez la fonction lapply pour appliquer la fonction calcul_medailles_individuelles à chaque élément de la colonne Athletes_medailles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_medailles_individuelles1 <- \n  function(data_frame) {\n    \n    medailles_df <- \n      data.frame(\n      \n        Athlete = gsub(\"[file://\\\\s*\\\\(.*\\\\]\\\\s*\\\\(.*\\\\)\", \"\", data_frame$Athletes_medailles),\n      \n        Pays = gsub(\".*\\\\((\\\\w+)\\\\)\", \"\\\\1\", data_frame$Athletes_medailles),\n      \n        OR = as.integer(gsub(\".*\\\\((\\\\d+)-\\\\d+-\\\\d+\\\\)\", \"\\\\1\", data_frame$Athletes_medailles)),\n      \n        ARGENT = as.integer(gsub(\".*\\\\(\\\\d+-(\\\\d+)-\\\\d+\\\\)\", \"\\\\1\", data_frame$Athletes_medailles)),\n      \n        BRONZE = as.integer(gsub(\".*\\\\(\\\\d+-\\\\d+-(\\\\d+)\\\\)\", \"\\\\1\", data_frame$Athletes_medailles))\n    )\n   \n    medailles_df$TotalMedailles <- \n      medailles_df$OR + medailles_df$ARGENT + medailles_df$BRONZE\n   \n    classement_df <- \n      medailles_df[order(-medailles_df$TotalMedailles, -medailles_df$OR, -medailles_df$ARGENT, -medailles_df$BRONZE), ]\n   \n    meilleurs_athletes <- \n      head(classement_df$Athlete, 3)\n   \n    T <- meilleurs_athletes\n   \n    return(T)\n  }\n\ncalcul_medailles_individuelles1(data_medailles_sport_ete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Michael Phelp\"                  \"Larissa Latynina (URS) (9-5-4)\"\n[3] \"Edoardo Mangiarott\"            \n```\n:::\n:::\n\n\n*Le top 3 des athlètes est Michael Phelp, Larissa Latynina et Edoardo Mangiarott*\n\n**Question 10 :** Quels sont les 3 nationalités les plus représentées, pour toutes les épreuves, au classement du nombre de médailles d'or individuelles reccueillies ? - Pour ce faire, vous implémenterez une fonction extraire_nationalite_athlete qui à partir d'une chaine de charactère extraira le nombre d'athlète et leur nationalité. Par exemple, la chaine de caractère \"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\"donnera en sortie c(\"FIN\" = 1, \"USA\" = 1).\n\n-   Vous utilisez la fonction lapply pour appliquer la fonction à toute la colonne 2\n\n-   Vous agrégerez les résultats de manière à sommer toutes les lignes et à obtenir les 3 nations les plus représentées, et leur effectif.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#implémenterez une fonction extraire_nationalite_athlete\nextraire_nationalite_athlete <- \n  function(chaine) {\n  \n  nationalites <- \n    regmatches(chaine, gregexpr(\"\\\\b[A-Z]{3}\\\\b\", chaine,\n                                              perl=TRUE))[[1]]\n  \n  return(nationalites)\n}\n\nnationalites_liste <-\n  unlist(lapply(data_medailles_sport_ete$Athletes_or,\n                                    extraire_nationalite_athlete))\n\ntop_3_nationalites <- \n  head(sort(table(nationalites_liste), decreasing =\n                                  TRUE), 3)\n\nprint(top_3_nationalites)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnationalites_liste\nUSA CHN CUB \n 20  13   8 \n```\n:::\n:::\n\n\n**Question 11 :** Intéressez-vous désormais au deuxième tableau contenu dans list_tables, faisant référence aux JO d'hiver. Appliquez les fonctions calcul_medailles_individuelles et extraire_nationalite_athlete aux deux dernières colonnes, à la manière des questions 9 et 10. Cette fois-ci, vous utiliserez la fonction appropriée du package purrr en lieu et place de lapply. Quelles sont les résultats ? Quelle différence voyez-vous entre lapply et les fonctions de purrr ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_hiver <- list_tables [[2]]\nprint(data_medailles_sport_hiver)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   <chr>        <chr>        <chr>  <chr>       <chr>       <chr>               \n 1 \"Discipline\" Discipline   Années Éditions    épreuves e… Or                  \n 2 \"\"           Biathlon     1924,… 16          11          54                  \n 3 \"\"           Bobsleigh    1924-… 21          3           39                  \n 4 \"\"           Combiné nor… Depui… 22          3           28                  \n 5 \"\"           Curling      1924,… 4           2           7                   \n 6 \"\"           Hockey sur … Été :… 23          2           24                  \n 7 \"\"           Luge         Depui… 14          4           37                  \n 8 \"\"           Patinage ar… Été :… 24          4           77                  \n 9 \"\"           Patinage de… Depui… 22          12          152                 \n10 \"\"           Patinage de… Depui… 7           8           32                  \n11 \"\"           Saut à ski   Depui… 22          4           38                  \n12 \"\"           Skeleton     1924,… 6           2           6                   \n13 \"\"           Ski acrobat… Depui… 7           10          18                  \n14 \"\"           Ski alpin    Depui… 19          10          132                 \n15 \"\"           Ski de fond  Depui… 22          12          134                 \n16 \"\"           Snowboard    Depui… 5           10          14                  \n# ℹ 5 more variables: `médailles décernés` <chr>, `médailles décernés` <chr>,\n#   `médailles décernés` <chr>,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` <chr>,\n#   `Athlète(s) avec le plus de médailles d'or` <chr>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_hiver <- \n  data_medailles_sport_hiver[,-1]\n\ncolnames(data_medailles_sport_hiver) = \n  c(\"Discipline\", \"Annee\", \"Editions\",\"Epreuves_2014\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_hiver <- data_medailles_sport_hiver[-1,]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# On va convertir toutes ces colonnes en entiers avec integer\ndata_medailles_sport_hiver <- \n  data_medailles_sport_hiver %>%\n  mutate(\n    Editions = as.integer(Editions),\n    Epreuves_2014 = as.integer(Epreuves_2014),\n    Or = as.integer(Or),\n    Argent = as.integer(Argent),\n    Bronze = as.integer(Bronze),\n    Total = as.integer(Total)\n  )\n\n#creation de la fonction calcul medaille individuelle mais avec library purr\ncalcul_medailles_individuelles2_purrr <- \n  function(data_frame) {\n  \n  medailles_df <- data.frame(\n\n    Athlete = gsub(\"[file://\\\\s*\\\\(.*\\\\]\\\\s*\\\\(.*\\\\)\", \"\", \n                   data_frame$Athletes_medailles),\n    \n    Pays = gsub(\".*\\\\((\\\\w+)\\\\)\", \"\\\\1\", \n                data_frame$Athletes_medailles),\n    \n    OR = as.integer(gsub(\".*\\\\((\\\\d+)-\\\\d+-\\\\d+\\\\)\", \"\\\\1\", \n                         data_frame$Athletes_medailles)),\n    \n    ARGENT = as.integer(gsub(\".*\\\\(\\\\d+-(\\\\d+)-\\\\d+\\\\)\", \"\\\\1\", \n                             data_frame$Athletes_medailles)),\n    \n    BRONZE = as.integer(gsub(\".*\\\\(\\\\d+-\\\\d+-(\\\\d+)\\\\)\", \"\\\\1\", \n                             data_frame$Athletes_medailles))\n  )\n  \n  medailles_df$TotalMedailles <-\n    rowSums(medailles_df[, c(\"OR\", \"ARGENT\", \"BRONZE\")], na.rm = TRUE)\n  \n  classement_df <- \n    medailles_df[order(-medailles_df$TotalMedailles, -medailles_df$OR, -medailles_df$ARGENT, -medailles_df$BRONZE), ]\n  \n  meilleurs_athletes <- \n    head(classement_df$Athlete, 3)\n  \n  return(meilleurs_athletes)\n}\n\n# creation de la fonciton pour extraire la nationalite des athjletes \nextraire_nationalite_athlete <- \n  function(chaine) {\n  nationalites <- \n    regmatches(chaine, gregexpr(\"\\\\b[A-Z]{3}\\\\b\", chaine, perl = TRUE))[[1]]\n  \n  return(nationalites)\n}\n\n# Utilisation de purrr pour extraire les nationalités et trouver les trois principales\nnationalites_list <- \n  data_medailles_sport_hiver$Athletes_or %>%\n  map(extraire_nationalite_athlete) %>%\n  flatten_chr()\n\ntop_3_nationalites <- \n  table(nationalites_list) %>%\n  sort(decreasing = TRUE) %>%\n  head(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Affichage des résultats\nprint(data_medailles_sport_hiver)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 10\n   Discipline             Annee Editions Epreuves_2014    Or Argent Bronze Total\n   <chr>                  <chr>    <int>         <int> <int>  <int>  <int> <int>\n 1 Biathlon               1924…       16            11    54     54     54   162\n 2 Bobsleigh              1924…       21             3    39     37     39   115\n 3 Combiné nordique       Depu…       22             3    28     28     28    84\n 4 Curling                1924…        4             2     7      7      7    21\n 5 Hockey sur glace       Été …       23             2    24     24     24    72\n 6 Luge                   Depu…       14             4    37     35     36   108\n 7 Patinage artistique    Été …       24             4    77     75     76   228\n 8 Patinage de vitesse    Depu…       22            12   152    155    148   455\n 9 Patinage de vitesse s… Depu…        7             8    32     32     32    96\n10 Saut à ski             Depu…       22             4    38     39     37   114\n11 Skeleton               1924…        6             2     6      6      6    18\n12 Ski acrobatique        Depu…        7            10    18     18     18    54\n13 Ski alpin              Depu…       19            10   132    135    130   397\n14 Ski de fond            Depu…       22            12   134    132    133   399\n15 Snowboard              Depu…        5            10    14     14     14    42\n# ℹ 2 more variables: Athletes_medailles <chr>, Athletes_or <chr>\n```\n:::\n\n```{.r .cell-code}\nprint(top_3_nationalites)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnationalites_list\nCAN NOR GER \n  8   7   6 \n```\n:::\n\n```{.r .cell-code}\nprint(nationalites_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"NOR\" \"GER\" \"GER\" \"FIN\" \"GER\" \"AUT\" \"NOR\" \"NOR\" \"RDA\" \"SWE\" \"SWE\" \"SWE\"\n[13] \"SWE\" \"CAN\" \"CAN\" \"CAN\" \"CAN\" \"CAN\" \"GER\" \"GER\" \"GER\" \"CAN\" \"CAN\" \"SWE\"\n[25] \"NOR\" \"URS\" \"URS\" \"KOR\" \"RUS\" \"FIN\" \"SUI\" \"GBR\" \"CAN\" \"USA\" \"NOR\" \"CRO\"\n[37] \"NOR\" \"NOR\" \"USA\"\n```\n:::\n:::\n\n\n*En fonction de si on utilise purrr ou apply, cela se voit dans la sortie de résultat, sur la structure de données retournée : l'un renvoie une liste plutôt que l'autre qui renvoie des vecteurs automatiques.*\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}